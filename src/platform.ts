import { 
  API, 
  APIEvent, 
  Logger, 
  PlatformAccessory, 
  PlatformConfig, 
  Service, 
  Characteristic, 
  DynamicPlatformPlugin, 
  Logging } from 'homebridge';

import { PLATFORM_NAME, PLUGIN_NAME } from './settings';
import { MIO441R_Accessory } from './accessory/mio441r-accessory';
import { MIO441R_BaseStruct } from './mio_device/mio_structs';
import { ApiSearch } from './mio_device/mio_api';
import { ConfigInput, parseConfig } from './config';
import { MqttService } from './mio_device/mqtt_service';

// --------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------
export class MulticoreHomebridgePlatform implements DynamicPlatformPlugin {
  public readonly log: Logger;
  public readonly config: ConfigInput;
  public readonly api: API;
  public readonly mqtt: MqttService;
  private _apiSearch: ApiSearch;
  
  public readonly Service: typeof Service;
  public readonly Characteristic: typeof Characteristic;  
  // public customCharacteristics: {[key: string]: WithUUID<new () => Characteristic>;};

  private readonly deviceAccessories: Map<string, MIO441R_Accessory> = new Map();       //key => uuid of device
  private readonly homebridgeAccessories: Map<string, PlatformAccessory> = new Map();   //key => uuid generated by api.hap.uuid

  // --------------------------------------------------------------------------------------
  constructor(log: Logging, config: PlatformConfig, api: API){
    this.log = log;
    this.config = parseConfig(config);
    this.api = api;
    this.Service = api.hap.Service;
    this.Characteristic = api.hap.Characteristic;
    this.mqtt = new MqttService('_DEV', this.config, this.log);

    this.log.info('%s v%s, node %s, homebridge v%s', config.name, config.version, process.version, api.serverVersion);
    this.log.debug('config.json: %j', config);

    // this.customCharacteristics = Characteristics(api.hap.Characteristic);
    // const MulticoreAPILog: Logging = Object.assign(() => {}, this.log, {prefix: `${this.log.prefix || PLATFORM_NAME}.API`,});

    this._apiSearch = new ApiSearch();
    this._apiSearch.on(ApiSearch.DEVICES.MIO441R, this.onFoundMIO441R.bind(this));

    this.log.info('Finished initializing platform:');

    // When this event is fired it means Homebridge has restored all cached accessories from disk.
    this.api.on(APIEvent.DID_FINISH_LAUNCHING, () => {
      this.log.debug(APIEvent.DID_FINISH_LAUNCHING);

      if(this.config.api?.removeAtStartup === true){
        this.removeAllAccessories();
      }

      this.loadStoredDevices();
      this.loadStaticDevices();
      
      if(this.config.api?.disableSSDP === true){
        this.log.debug('Search disabled');
      }else{
        this._apiSearch.start();
      }
    });

    this.api.on('shutdown', this.onShutdown.bind(this));
  }

  // --------------------------------------------------------------------------------------
  /** This function is invoked when homebridge restores cached accessories from disk at startup. */
  configureAccessory(accessory: PlatformAccessory): void {
    const existingAccessory = this.homebridgeAccessories.get(accessory.UUID);
    if(existingAccessory !== undefined){
      this.log.error('DUPLICATE chached accessory: [%s] %s - unregister', existingAccessory.displayName, existingAccessory.UUID);
      this.api.unregisterPlatformAccessories(PLUGIN_NAME, PLATFORM_NAME, [existingAccessory]);
    }
    
    if(this.config.api?.debug as number >= 1){
      this.log.info('Configuring cached accessory: [%s] %s', accessory.displayName, accessory.UUID);
    }

    this.homebridgeAccessories.set(accessory.UUID, accessory);
  }

  // --------------------------------------------------------------------------------------
  loadStoredDevices(){
    this.log.info('loadStoredDevice');
    this.homebridgeAccessories.forEach(existingAccessory => {
      if(existingAccessory.context.device !== undefined && this.isStaticList(existingAccessory.context.device)){
        if(this.config.api?.debug as number >= 1){
          this.log.info('Restoring existing accessory from cache: %j', existingAccessory.context.device);
        }
        const device: MIO441R_Accessory = new MIO441R_Accessory(this, this.config, existingAccessory, existingAccessory.context.device); 
        this.deviceAccessories.set(existingAccessory.context.device.uuid, device);
        this.api.updatePlatformAccessories([existingAccessory]);
      }else{
        if(this.config.api?.debug as number >= 1){
          this.log.info('Restoring wrong existing accessory from cache: %s - unregistered', existingAccessory.displayName);
        }
        this.homebridgeAccessories.delete(existingAccessory.UUID);
        this.api.unregisterPlatformAccessories(PLUGIN_NAME, PLATFORM_NAME, [existingAccessory]);
      }
    });
  }

  // --------------------------------------------------------------------------------------
  isStaticList(data: MIO441R_BaseStruct){
    if(data?.static === true){
      if(this.config?.deviceList?.length){
        if(this.config.deviceList.filter(device => device.ipAddress === data.address).length){
          return true;
        }
      }
      this.log.warn('Static device not exist => ', data);
      return false;
    }else{
      return true;
    }
  }

  // --------------------------------------------------------------------------------------
  loadStaticDevices(){
    if(this.config.api?.debug as number >= 2){
      this.log.info('loadStaticDevices');
    }
    if(this.config?.deviceList?.length){
      this.config.deviceList.forEach( (item) => {
        this._apiSearch.searchDeviceByIp(item.ipAddress!);
      });
    }
  }

  // --------------------------------------------------------------------------------------
  removeAllAccessories(){
    if(this.config.api?.debug as number >= 1){
      this.log.warn('removeAllAccessories');
    }
    this.homebridgeAccessories.forEach(accessory => {
      this.removeAccessory(accessory);
    });
  }

  // --------------------------------------------------------------------------------------
  addAccessory(device: MIO441R_BaseStruct): boolean {
    if (device === null) {
      this.log.error('Missing device data !!!');
      return false;
    }

    if (device.address === null || device.address.length === 0) {
      this.log.error('Missing device address !!! %j', device);
      return false;
    }

    if (device.uuid === null || device.uuid.length === 0) {
      this.log.error('Missing device uuid !!! %s', device.address);
      return false;
    }
    
    if (device.name === null || device.name.length === 0) {
      this.log.error('Missing device name !!! %s', device.address);
      return false;
    }
      
    let deviceAccessory = this.deviceAccessories.get(device.uuid);

    if(deviceAccessory !== undefined) {
      deviceAccessory.deviceUpdateContext(device);
      if(this.config.api?.debug as number >= 1){
        this.log.error( 'Device already exist: [%s] %s [%s]', device.uuid, device.address, device.name );
      }
      return false;
    }

    if(this.config.api?.automaticAddBySearch === true || device?.static === true){
      if(this.config.api?.debug as number >= 1){
        this.log.info( 'Adding device: [%s] %s [%s]', device.uuid, device.address, device.name );
      }

      const _uuid = this.api.hap.uuid.generate(device.uuid);
      const homebridgeAccessory = this.homebridgeAccessories.get(_uuid);

      deviceAccessory = new MIO441R_Accessory(this, this.config, homebridgeAccessory, device);

      this.deviceAccessories.set(device.uuid, deviceAccessory);
      deviceAccessory.homebridgeAccessory.context.device = device;
      this.homebridgeAccessories.set(_uuid, deviceAccessory.homebridgeAccessory);
      this.api.registerPlatformAccessories(PLUGIN_NAME, PLATFORM_NAME, [deviceAccessory.homebridgeAccessory]);
      return true;
    }
    
    return false;
  }
  
  // --------------------------------------------------------------------------------------
  private removeAccessory(homebridgeAccessory: PlatformAccessory): void {
    if(this.config.api?.debug as number >= 1){
      this.log.info('Removing: %s', homebridgeAccessory.displayName);
    }

    this.deviceAccessories.delete(homebridgeAccessory.context.device.uuid);
    this.homebridgeAccessories.delete(homebridgeAccessory.UUID);
    this.api.unregisterPlatformAccessories(PLUGIN_NAME, PLATFORM_NAME, [homebridgeAccessory]);
  }

  // --------------------------------------------------------------------------------------
  onFoundMIO441R(data: MIO441R_BaseStruct){
    if(this.addAccessory(data)){
      if(this.config.api?.debug as number >= 1){
        this.log.info('New device added by search :', data.address, data.uuid, data.name);
      }
    }else{
      if(this.config.api?.debug as number >= 1){
        this.log.warn('Device founded by search already exist :', data.address, data.uuid, data.name);
      }
    }
  }

  // --------------------------------------------------------------------------------------
  onShutdown(){
    this.log.debug('shutdown');
    this.mqtt.destroy();
    this._apiSearch.destroy();
    // this.api.unregisterPlatformAccessories(PLUGIN_NAME, PLATFORM_NAME, this.homebridgeAccessories );
  }
}

// --------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------
    